객체지향 프로그래밍이란? 
데이터를 중심으로, 그 데이터를 처리하는 함수를 함께 묶어 객체 단위로 프로그램을 구성하는 방식

1절. 객체와 클래스
- 클래스 : 객체를 만들어내는 틀, 설계도 
*이걸 쓰는 이유 : 객체를 이용해 데이터를 저장하기 위해
*객체 고유의 기능을 갖기 위해
class 클래스명(상속받을 클래스명)
    변수나 함수들을 선언
- 객체 : 클래스에 의해 생성된 실체, 인스턴스
p1 = Person()
-속성 : 객체가 가지는 값들
-메서드 : 객체가 할 수 있는 동작
-갭슐화 : 데이터와 메서드를 하나로 묶고, 외부에서 직접 접근하지 못하게 하는것
-상속 : 기존 클래스의 속성과 기능을 물려받아 새로운 클래스를 만드는 것
-다형성 : 같은 이름의 메서드가 다양한 방식으로 동작할 수 있도록 하는것.


2절. 생성자와 소멸자

-생성자 : __init__(self, 매개변수,..) -객체가 생성될 때 자동 실행
        객체 생성시 필요한 인스턴스 변수 초기화를 포함
-소멸자 : __del__(self) - 객체가 소멸될 때 자동 실행
        인스턴스 객체의 레퍼런스 카운트가 0이 될 때 실행
-특수 메서드 : __str__ -해당 객체를 사람이 보기 좋은 문자열로 변환
            print(객체) 또는 str(객체)를 사용할 때 자동으로 호출

3절. 변수와 메소드(함수)

-클래스 변수 : 클래스 자체에 저장되는 변수, 모든 인스턴스가 공유
-인스턴스 변수 : 인스턴스(객체)마다 개별적으로 존재
-인스턴스 메소드 : 첫번째 인자에 self를 꼭 명시. 객체를 통해서만 호출할 수 있는 메소드
-클래스 메소드 : 메소드위에 @classmethod를 선언한 메소드. 첫번째 인자에 cls(clz) 꼭 명시
-static 메소드 : 메소드위에 @staticmethod를 선언한 메소드. 인자를 넣지 않음

클래스 구조(기초문법)
    class 클래스명(대문자명을 사용하는게 일반적임.) :
            '독스트링(클래스에 대한 설명)'
            클래스변수명 = 값 # 모든 인스턴스가 공유
            def __init__(self, [객체멤버를 초기화할 변수=값,...]):
                self.인스턴스(일반)변수=값 #객체마다 고유하게 저장
                객체를 생성할 때 객체 멤버변수의 초기화
            def method(self):
                인스턴스 메소드(일반함수)의 매개변수는 self를 반드시 포함
            @classmethod     #클래스 자체를 대상으로 동작
            def classmethod(cls):
                코드
            @staticmethod    #클래스나 인스턴트와 무관한 일반 함수처럼 동작
            def staticmethod():
                코드
    객체변수 = 클래스명()
    객체변수. method()
    클래스명.classmethod()
    클래스명.staticmethod()


4절. 상속과 재정의
- 클래스를 재사용
- 상속을 이용하면 부모클래스의 모든 속성을 자식클래스로 물려줄 수 있음.(생성자, 소멸자, 인스턴스 변수 등 모든것.)
- 문법: class 자식클래스명(부모클래스명):