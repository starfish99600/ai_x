-- [ IV ] DDL, DCL, DML
/* SQL
 - DCL
    사용자 계정 생성 CREATE USER, 권한부여 GRANT, 
    권한박탈 REVOKE,사용자계정삭제 DROP USER 트렌젝션 명령어
 - DDL
    테이블생성 CREATE TABLE, 테이블구조변경 ALTER TABLE,
    테이블삭제 DROP TABLE
 - DML
    INSERT, SELECT, UPDATE, DELETE - DML은 취소 가능
*/
--------------------------
-------- ★ DDL ★ --------
--------------------------
-- 1. 테이블 생성(CREATE TABLE 테이블명..) : 테이블 구조를 정의
CREATE TABLE BOOK(
    BOOKID    NUMBER(4), -- BOOKID필드의 타입은 숫자 4자리
    BOOKNAME  VARCHAR2(20), -- BOOKNAME필드의 타입은 문자 20BYTE
    PUBLISHER VARCHAR2(20),
    RDATE     DATE,         -- RDATE 필드의 타입은 DATE형
    PRICE     NUMBER(8,2),  -- PRICE 필드의 타입은 숫자전체8자리 중 소숫점2자리
    PRIMARY KEY(BOOKID) -- 제약조건 : BOOKID를 PRIMARY KEY 필드로(NOT NULL, UNIQUE)
);
SELECT * FROM BOOK;
DESC BOOK;
DROP TABLE BOOK; -- 2. 테이블삭제
CREATE TABLE BOOK(
    BID NUMBER(4) PRIMARY KEY,
    BNAME VARCHAR2(20),
    PUBLISHER VARCHAR2(20),
    RDATE     DATE,
    PRICE     NUMBER(8)
);
-- EX. DEPT01 : DEPTNO(숫자2;PK), DNAME(문자14), LOC(문자13)
DROP TABLE EMP01;
DROP TABLE DEPT01;
CREATE TABLE DEPT01 (
    DEPTNO NUMBER(2) PRIMARY KEY,
    DNAME  VARCHAR2(14),
    LOC    VARCHAR2(13)
);
SELECT * FROM DEPT01;

SELECT * FROM DEPT; -- 10, 20,30,40
SELECT DISTINCT DEPTNO FROM EMP; -- 10, 20, 30
INSERT INTO EMP (EMPNO, ENAME, DEPTNO) VALUES (9999, 'HONG', 40);
SELECT * FROM EMP;
ROLLBACK; -- DML 취소 트랜젝션 명령어

SELECT * FROM DEPT01;
-- EMP테이블과 유사한 EMP01 테이블 : EMPNO(수4-PK), ENAME(문10), SAL(숫7,2), DEPTNO(숫2-FK)
CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    SAL   NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT01(DEPTNO)
);
DROP TABLE EMP01; -- 테이블 삭제
CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10),
    SAL   NUMBER(7,2),
    DEPTNO NUMBER(2),
    PRIMARY KEY(EMPNO),
    FOREIGN KEY(DEPTNO) REFERENCES DEPT01(DEPTNO)
);

--------------------------
-------- ★ DML ★ --------
--------------------------
-- 1. INSERT INTO 테이블명 (필드명1, 필드명2,...) VALUES (값1, 값2, ...);
   -- INSERT INTO 테이블명 VALUES (값1, 값2, 값3, ...값N);
SELECT * FROM EMP01;
SELECT * FROM DEPT01;
INSERT INTO DEPT01 VALUES (50, 'ACCOUNTING', 'SEOUL');
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (51, '전산','신림');
INSERT INTO DEPT01 (DNAME, LOC, DEPTNO) VALUES ('영업','봉천', 52);
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (53, '연구', NULL); -- 명시적으로 NULL 입력
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (60, '설계');  -- LOC : 묵시적으로 NULL 입력
COMMIT; -- 트랜젝션 영역에 쌓여 있는 DML 명령어 일괄 실행
-- 서브쿼리를 이용한 INSERT
    -- EX. DEPT테이블에서 10~30부서의 내용을 DEPT01테이블에 INSERT
    INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;
    
-- ※※※ 연습문제 pdf 1page
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB   VARCHAR2(9),
    SAL   NUMBER(7,2)
);
SELECT * FROM SAM01;
INSERT INTO SAM01 (EMPNO, ENAME, JOB, SAL) 
    VALUES (1000,'APPLE','POLICE',10000);
INSERT INTO SAM01 VALUES (1010,'BANANA','NURSE',15000);
INSERT INTO SAM01 VALUES (1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01 (EMPNO, ENAME, SAL) VALUES (1030,'VERY',25000);
INSERT INTO SAM01 VALUES (1040,'CAT',NULL, 2000);
INSERT INTO SAM01 SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO=10;
SELECT * FROM SAM01;
COMMIT;

@D:\ai_x\lecNote\04_DBMS\demo.sql;
-- 2. UPDATE 테이블명 SET 필드명1=값1[, 필드명2=값2, ...필드명N=값N] [WHERE 조건];
DROP TABLE EMP01;
CREATE TABLE EMP01 
    AS SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP;
SELECT * FROM EMP01;
    -- EX. 부서번호를 30으로 수정
    UPDATE EMP01 SET DEPTNO=30;
    SELECT * FROM EMP01;
    ROLLBACK;
    -- EX. 모든 사원(EMP01)의 급여(SAL)를 10%인상
    UPDATE EMP01 SET SAL = SAL*1.1;
    SELECT * FROM EMP01;
    ROLLBACK;
    -- EX. EMP01테이블에서 10번부서의 직원을 30번부서로
    UPDATE EMP01 SET DEPTNO=30 WHERE DEPTNO=10;
    SELECT * FROM EMP01;
DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT * FROM EMP;
SELECT * FROM EMP01;
    -- EX. SCOTT의 부서번호를 30으로, JOB은 'MANAGER'로, SAL과 COMM을 500$인상, 
        -- 입사일은 오늘로, 상사를 'KING'으로
    UPDATE EMP01
        SET DEPTNO=30,
            JOB = 'MANAGER',
            SAL = SAL + 500,
            COMM = NVL(COMM,0) + 500,
            -- HIREDATE = TO_DATE('25/06/04', 'YY/MM/DD'),
            HIREDATE = SYSDATE,
            MGR = (SELECT EMPNO FROM EMP01 WHERE ENAME='KING')
        WHERE ENAME='SCOTT';
    SELECT * FROM EMP01 WHERE ENAME IN ('SCOTT', 'KING');
    -- EX. DALLAS에 근무하는 직원의 급여, 상여를 100$인상
    UPDATE EMP01 
        SET SAL = SAL + 100, 
            COMM = NVL(COMM, 0) + 100
        WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
    SELECT * FROM EMP01;
    -- EMP01에서 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정
    UPDATE EMP01
        SET SAL = (SELECT SAL FROM EMP01 WHERE ENAME='KING'),
            HIREDATE = (SELECT HIREDATE FROM EMP01 WHERE ENAME='KING');
    SELECT * FROM EMP01;
    ROLLBACK;
    
-- 3. DELETE FROM 테이블명 [WHERE 조건];
DELETE FROM EMP01;
SELECT * FROM EMP01;
ROLLBACK; -- INSERT, UPDATE, DELETE만 취소 가능
DELETE FROM DEPT; -- 불가(EMP테이블에 참조된 데이터가 있어서)
    -- EX. EMP01에서 'FORD'직원 퇴사
    DELETE FROM EMP01 WHERE ENAME='FORD';
    SELECT * FROM EMP01;
    -- EX. EMP01에서 30번 부서 직원 삭제
    DELETE FROM EMP01 WHERE DEPTNO=30;
    SELECT * FROM EMP01;
    -- EX. 부서명이 RESEARCH 부서인 직원을 삭제
    DELETE FROM EMP01 WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');
    SELECT * FROM EMP01;
    ROLLBACK;
    -- SAM01 : JOB이 정해지지 않은 사원 삭제
    SELECT * FROM SAM01;
    DELETE FROM SAM01 WHERE JOB IS NULL;
    -- SAM01 : 이름이 ORANGE 삭제
    DELETE FROM SAM01 WHERE ENAME='ORANGE';
    
-- ※ DML 연습문제 PDF 2PAGE
-- 1. 테이블생성
DROP TABLE MY_DATA;
CREATE TABLE MY_DATA(
    ID NUMBER(4) ,
    NAME VARCHAR2(10),
    USERID VARCHAR2(30),
    SALARY NUMBER(10,2),
    PRIMARY KEY(ID)
);
-- 2. 데이터 입력
INSERT INTO MY_DATA 
        (ID, NAME, USERID, SALARY) 
    VALUES (1, 'Scott', 'sscott', 10000.00);
INSERT INTO MY_DATA VALUES (2, 'Ford', 'fford',13000.00);
INSERT INTO MY_DATA VALUES (3, 'Patel', 'ppatel',33000.00);
INSERT INTO MY_DATA VALUES (4,'Report','rreport',23500.00);
INSERT INTO MY_DATA  VALUES (5, 'Good', 'ggood', 44450.00);

-- 3. 입력한 자료 확인 
-- TO_CHAR(날짜형데이터, 'YY/MM/DD HH:MI:SS')
-- TO_CHAR(숫자형데이터, '99,999.9')
SELECT ID, NAME, USERID, TO_CHAR(SALARY, '99,999.99') 
    FROM MY_DATA;
-- 4. 트랜젝션 작업 반영
COMMIT;
-- 5. ID가 3인 사람 수정
UPDATE MY_DATA SET SALARY=65000.00 WHERE ID=3;
COMMIT;
-- 6. Ford 삭제
DELETE FROM MY_DATA WHERE NAME='Ford';
COMMIT;
-- 7. SALARY가 15,000이하인 사람의 급여를 15,000으로 변경
UPDATE MY_DATA SET SALARY = 15000 WHERE SALARY <= 15000;
SELECT * FROM MY_DATA;
-- 8 테이블 삭제
DROP TABLE MY_DATA;

-- ※ DML 연습문제 PDF 3PAGE
--1. EMP 테이블과 같은 구조와 같은 내용의 테이블 EMP01을 생성(테이블이 있을시
    -- 제거한 후)하고, 모든 사원의 부서번호를 30번으로 수정합니다.
DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT * FROM EMP; -- 테이블 내용 복제(제약조건은 복제 안 됨)
SELECT * FROM EMP01;
UPDATE EMP01 SET DEPTNO=30;
-- 2. EMP01테이블의 모든 사원의 급여를 10% 인상시키는 UPDATE문을 작성
UPDATE EMP01 SET SAL=SAL*1.1;
-- 3. 급여가 3000이상인 사원만 급여를 10%인상
UPDATE EMP01 
    SET SAL=SAL*1.1 
    WHERE SAL>=3000;
-- 4. EMP01테이블에서 ‘DALLAS’에서 근무하는 직원들의 연봉을 1000인상
UPDATE EMP01 
        SET SAL= SAL+1000 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
-- 5. SCOTT사원의 부서번호는 20번으로, 직급은 MANAGER로 한꺼번에 수정
UPDATE EMP01 
        SET DEPTNO=20, 
            JOB='MANAGER' 
    WHERE ENAME='SCOTT';
    SELECT * FROM EMP01;
-- 6. 부서명이 SALES인 사원을 모두 삭제하는 SQL작성
DELETE FROM EMP01 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
-- 7. 사원명이 ‘FORD’인 사원을 삭제하는 SQL 작성
DELETE FROM EMP01 WHERE ENAME='FORD';
-- 8. SAM01 테이블에서 JOB이 NULL인 사원을 삭제하시오
DELETE FROM SAM01 WHERE JOB IS NULL;
-- 9. SAM01테이블에서 ENAME이 ORANGE인 사원을 삭제하시오
DELETE FROM SAM01 WHERE ENAME='ORANGE';
--10. 급여가 1500이하인 사람의 급여를 1500으로 수정
UPDATE EMP01 SET SAL=1500 WHERE SAL<=1500;
-- 11. JOB이 ‘MANAGER’인 사원의 급여를 10%인하하시오
UPDATE EMP01 SET SAL=SAL*0.9 WHERE JOB='MANAGER' ;
SELECT * FROM EMP01;

SELECT * FROM EMP;
SELECT * FROM DEPT;
-- ★ 제약조건 : INSERT, UPDATE할 때, 제약조건에 맞는 데이터만 INSERT, UPDATE됨
-- (1) PRIMARY KEY : 테이블의 각 행을 유일한 값으로 식별하기 위한 필드
-- (2) FOREIGN KEY : 테이블의 열이 다른 테이블의 열을 참조
-- (3) NOT NULL : NULL을 포함하지 않는 필드
-- (4) UNIQUE : 모든 행의 값이 유일한 값. NULL은 허용(NULL은 여러개 입력 가능)
-- (5) CHECK(조건) : 해당 조건이 만족(NULL 값 허용)
-- DEFAULT 기본값 : 해당 열의 데이터를 입력하지 않으면 원래는 NULL이 들어갈 것을 기본값이 들어가도록

-- DEPT1 & EMP1 (exERD를 이용하여 ERD 작성=테이블설계 -> DDL)
DROP TABLE DEPT1;
CREATE TABLE DEPT1(
    DEPTNO NUMBER(2) PRIMARY KEY,
    DNAME  VARCHAR2(14) NOT NULL UNIQUE,
    LOC    VARCHAR2(13) NOT NULL
);
DROP TABLE DEPT1;
CREATE TABLE DEPT1(
    DEPTNO NUMBER(2),
    DNAME  VARCHAR2(14) NOT NULL,
    LOC    VARCHAR2(13) NOT NULL,
    PRIMARY KEY(DEPTNO),
    UNIQUE(DNAME)
);
DROP TABLE EMP1;
CREATE TABLE EMP1(
    EMPNO NUMBER(4)    PRIMARY KEY,
    ENAME VARCHAR2(10) NOT NULL,
    JOB   VARCHAR2(9)  NOT NULL,
    MGR   NUMBER(4),
    HIREDATE DATE      DEFAULT SYSDATE,
    SAL   NUMBER(7,2)  CHECK(SAL>0),
    COMM  NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO)
);
DROP TABLE EMP1;
CREATE TABLE EMP1(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10) NOT NULL,
    JOB   VARCHAR2(9)  NOT NULL,
    MGR   NUMBER(4),
    HIREDATE DATE      DEFAULT SYSDATE,
    SAL   NUMBER(7,2),
    COMM  NUMBER(7,2),
    DEPTNO NUMBER(2) ,
    PRIMARY KEY(EMPNO),
    CHECK(SAL>0),
    FOREIGN KEY(DEPTNO) REFERENCES DEPT1(DEPTNO)
);
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL, DEPTNO)
    VALUES (1111, 'HONG', 'MANAGER', 1000, 10); -- 오류 : FK
INSERT INTO DEPT1 SELECT * FROM DEPT; -- DEPT의 내용을 DEPT1에 INSERT
INSERT INTO DEPT1 VALUES (40, 'IT', 'SEOUL'); -- 오류 : PK
INSERT INTO DEPT1 (DNAME, LOC) VALUES ('IT','SEOUL'); -- 오류:PK
SELECT * FROM DEPT1;
INSERT INTO DEPT1 VALUES (40, 'SALES', 'SEOUL'); -- 오류 : UNIQUE
INSERT INTO DEPT1 (DEPTNO, DNAME) VALUES (50, 'IT'); -- 오류 : NOT NULL

INSERT INTO EMP1 (EMPNO, ENAME, JOB) VALUES (1001, 'HONGGILDONG', 'MANAGER');--오류 : 길이
INSERT INTO EMP1 (EMPNO, ENAME, JOB) VALUES (1001, 'HONG', 'MANAGER'); -- DEFAULT 적용
SELECT * FROM EMP1;
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL) VALUES (1002, 'KIM', 'MANAGER', 0); -- 오류:CHECK
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL) VALUES (1002, 'KIM', 'MANAGER', 1); 
SELECT * FROM EMP1;

-- ※ DML 연습문제 PDF 4PAGE
-- DROP 순서는 자식 테이블부터
DROP TABLE STUDENT;
DROP TABLE MAJOR;
CREATE TABLE MAJOR(
    mCODE NUMBER(2) PRIMARY KEY,
    mNAME VARCHAR2(50) UNIQUE,
    mOFFICE VARCHAR2(200));
CREATE TABLE STUDENT(
    SNO    NUMBER(5) PRIMARY KEY,
    sNAME  VARCHAR2(50) ,
    sSCORE NUMBER(3) CHECK (sSCORE BETWEEN 0 AND 100),
    mCODE  NUMBER(2) REFERENCES MAJOR(mCODE) );

DROP TABLE STUDENT;
DROP TABLE MAJOR;
CREATE TABLE MAJOR(
    mCODE NUMBER(2),
    mNAME VARCHAR2(50),
    mOFFICE VARCHAR2(255),
    PRIMARY KEY(mCODE));
CREATE TABLE STUDENT(
    sNO VARCHAR2(10),
    sNAME VARCHAR2(50),
    sSCORE NUMBER(3),
    mCODE NUMBER(2),
    PRIMARY KEY(sNO),
    CHECK (sSCORE>=0 AND sSCORE<=100),
    FOREIGN KEY(mCODE) REFERENCES MAJOR(mCODE));
    
INSERT INTO MAJOR VALUES (1, '컴퓨터공학','A101호');
INSERT INTO MAJOR VALUES (2, '빅데이터','A102호');
SELECT * FROM MAJOR;
INSERT INTO STUDENT VALUES ('101','홍길동', 99, 1);
INSERT INTO STUDENT VALUES ('102','신길동',100, 2);
INSERT INTO STUDENT VALUES ('103','신길동',-9, 2); -- CHECK 제약조건
INSERT INTO STUDENT VALUES (NULL,'신길동',90, 3);  -- PK 제약조건=(NOT NULL+UNIQUE), FK
SELECT SNO 학번, SNAME 이름, SSCORE 점수, S.MCODE 학과코드, MNAME 학과명, MOFFICE 학과사무실
    FROM STUDENT S, MAJOR M 
    WHERE S.mCODE=M.mCODE;